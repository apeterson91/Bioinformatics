# An explosion of Hidden Messages Step 4:


# Find Patterns forming clumps in a string
# input: A string Genome, and integers k, L and t.
# k denotes the length of the string to identify
# L identifies the interval upon which you want to identify the kmers
# t identifies the amount of times you expect to find the pattern within L
## i.e. t determines what constitutes a "clump"
# Output. All distinct k-mers forming (L,t)-clumps in genome
def PatternCount(text, pattern):
 	patlength=len(pattern)
 	txtlength=len(text)
 	count = 0 
 	i=0
 	while i < txtlength:
 		if text[i:i+patlength]==pattern:
 			count+=1
 		i+=1
 	return count
 	
def FrequentWords(Text,k):
	Patterns={}
	FrequentPatterns=[]
	i=0
	while i < len(Text):
		Pattern = Text[i:i+k]
		if len(Pattern)==k:
			Patterns[Pattern]=PatternCount(Text,Pattern)
		i+=1
	maxCount=max(Patterns.values())
 	for i,k in Patterns.iteritems():
 		if k==maxCount:
 			FrequentPatterns.append(i)
 	return FrequentPatterns

# This works but is fairly slow needs to use FasterFrequentWords Function from import 
def Clump_Finding(k,L,t,Genome):
 	i=0;j=0
 	kmers = []
 	kset = set()
	while i<len(Genome)-L:
		Window=Genome[i:i+L]
		while j<len(Window)-k:
			if PatternCount(Window,Window[j:j+k])==t and Window[j:j+k] not in kset:
				kmers.append(Window[j:j+k])
				kset.add(Window[j:j+k])
			j+=1
		i+=1
		j=0
	return kmers

#helper functions
def NumberToPattern(index,k):
	if k==1:
		return NumberToSymbol(index)
	quotient = index/4
	remainder = index % 4
	PrefixPattern = NumberToPattern(quotient,k-1)
	symbol= NumberToSymbol(remainder)
	return PrefixPattern + symbol

def PatternToNumber(Pattern):
	if len(Pattern)==0:
		return 0
 	Symbol = Pattern[len(Pattern)-1:len(Pattern)]
 	Pattern = Pattern[0:len(Pattern)-1]
	return 4 * PatternToNumber(Pattern) + SymbolToNumber(Symbol)

def ComputingFrequencies(Text,k):
	FrequencyArray=[]
	i=0
	while i < 4**k:
		FrequencyArray.append(0)
		i+=1
	i=0
	while i < len(Text)-k+1:
		Pattern = Text[i:i+k]
		j=PatternToNumber(Pattern)
		FrequencyArray[j]+=1
		i+=1
	return FrequencyArray
	
	
def SymbolToNumber(symbol):
	bases= { "A":0 , "C":1, "G":2, "T":3}
	return bases[symbol]
def NumberToSymbol(number):
	bases= {0 :"A",  1: "C", 2 :"G", 3: "T"}
	return bases[number]

#Retailored for FasterClumpFinding incorporating "t" instead of maxcount
def FasterFrequentWords(Text,k,t):
	FrequentPatterns=[]
	FrequencyArray=ComputingFrequencies(Text,k)
	for i in range(4**k -1):
		if FrequencyArray[i]==t:
			Pattern=NumberToPattern(i,k)
			FrequentPatterns.append(Pattern)
	return FrequentPatterns

#Faster Clump_Finding Algorithm that uses Frequency Array
def FasterClumpFinding(k,L,t,Genome):
	FrequentPatterns=[]
	FrequentPatternset = set()
	Clump=[]
	for i in range(4**k):
		Clump.append(0)
	Text=Genome[0:L]
	FrequencyArray = ComputingFrequencies(Text,k)
	for i in range(4**k):
		if FrequencyArray[i]>=t:
			Clump[i]=1
	for i in range(0,len(Genome)-L):
		FirstPattern=Genome[i:k]
		j=PatternToNumber(FirstPattern)
		FrequencyArray[j]=FrequencyArray[j]-1
		LastPattern=Genome[i+L-k:i+L]
		j=PatternToNumber(LastPattern)
		FrequencyArray[j]=FrequencyArray[j]+1
		if FrequencyArray[j] >= t:
			Clump[j]=1
	for i in range(4**k):
		if Clump[i]==1:
			Pattern= NumberToPattern(i,k)
			FrequentPatterns.append(Pattern)
	return FrequentPatterns
	
	
	
	
print len(FasterClumpFinding(4,30,3,"GCACAAGGCCGACAATAGGACGTAGCCTTGAAGACGACGTAGCGTGGTCGCATAAGTACAGTAGATAGTACCTCCCCCGCGCATCCTATTATTAAGTTAATT"))

# 
# #### File prompts
# f=open(str(raw_input("What is the name of the textfile?")),"r")
# data = f.read()
# x=int(raw_input("What is the k?"))
# y=int(raw_input("What is the L?"))
# z=int(raw_input("What is the t?"))

# data="CTTAATCGAGAGGTTAATTATGAACTCAACGTCCGAAATTACACTTTAGTGGTTAGCTAAAGATAATAGTCCTGACTACTTATACATGCAGGTTCTGCAACTAAATCAGTCCCGCTACATCGTAGTTAAAATCAACTCTCGCCGCGCTAGTGAGAAGGAGAAAAAATTAACCCAGGAATGCCACCGCATCACCGTTCACTGATTCAAGCGATGACTCACGGGCTATCCTTATAGCTTATGGAACGCAGCTTCGAGCTGGAAGGGAAATAGAATCCTTCATTAGGTAAGTAATATCATAATTCCAGATCAGGCTGTAAATTGGCGAGGGACCTTGTCAAACTTGTGCTTCGACCAACAGGACGCTAAACCAAAGGAAATCCATGGCTGCATGCTTTCCACGTGCGATGGAGGGGACGTCGCCGTCTAGAAACACCCGAACGGGAGAGGGGTCTCTGGAAGCACGTACATCCACTTCTAGTGTTGGTGTGTAGATGCTGAGTTGCCGCGGGCAAGATCAATAGCGCCGCACGGTGTTCGATTGTGATCAAGCTCTTTGACGTCAGAGAGGCGAAGCCAGGCTACGGTGTCCAAGCAGACGCAAAGATCAGGAGCCGGAATCAGATGAAACGGTTCGAATCACCGCCCCGGACTACCACTTTGGAATCCTTTTGTGGCATTATTTGAGCTGTCGTAATTCACATCGCTCCCCGTGTGGGGCCTCGACTCGTGACGTCACATCGCTTCACATCGCTCACATCGCTCTTCATCACATCGCTTTCAGCAGTTCAACGAAGGCGTTCACATCGCTCGCTCTCCTCTGAGCCTAAAGTTAATTACATCAAAGTTAATTATTTGAAAGTAAAGTTAATTTCACATCGCTTTTTCACATAAAGTTAATTAAAGTTAATTTTCGCTCAAAGTTAATTCACAAAAGTTAATTAAAGTTAAAAAAGTAAAGTTAATTCACATCACATCGCAAAGTTAAAGTTAATTTAGCGGTGAAGGTAACTCACATCGCTCGTACTAGTGCTTATGTTCGGAAAGTAAAGTTAATTAAGTTAATTGTTAATAAAGTTAATTCTCCGAAAGTTAATTTAGGCTCACAAAGTTAATTATAAAGTTAATTGGTCCTTCACATCGCTGCTACCTCGGAGTATCACATCGCTTCTTCAAAGTTAATTCTCACGTCGGAAAGTTAATTTTCACATCGCTCACGGGAAAAAGTTAATTTCCATCATAAGTGAAGTGGGAAAGTTAATTATCATCGACGTCATAGAGGGCTCCTGCTGGCAAAGTTAATTAAAGTTAATTCCATTCATTCAAAGTTAATTCGCTAGCGCTTCCGATCCATGGAATAGCCGTGGGGTATTGCAAAGTAAAGTTAATTCTACACAGGTTTGTTCAAAAGTTAATTTCACAGTAATTCAGCTGTTTTACCATCGACGATTTCGGCCAATCTAAACTGGCGGCCATCTTCGGCTGAGTAGGCAGTCTGTGGGACGACAGACTCAGCTCATGGATAAATATGCAACGTACCGGCCGCGCACGTTCAGCAGCCTCTTTCTGATGGAAATTAAGATGCCATCCGCATGCTCATCACCGAAGAAACAACACCGGCATCATGTTTCATGTGCATCATGTTTCATGGCATCATGTTCGACAAGGAGTGAATACCTTATTGAGGAAGCCGGACTTGGCATCATGTTGTTCCGCCCGCGGCCCGTGGTGCCCGGAGCATCATGTTTACTCCCTTCCTCGCCTATTAGTAACGATCCATTGCCTGCATGCATCATGTTGCATCATGTTTCGCATCAGCATCATGTTCGGTCCTGAGCGATCGCTTGCATCATGTTAATGAAAACAGAGCATCATGTTATGTTTGTTTTGCTCTGTCGCGGCATCATGTTCATCGGCATCATGTTATGTTCAACAGTATATTACGTCCGCATCATGTTCCCCTGCTCCGAGTTGCATCATGTTTCGCCGGCGCATCATGTTTGGGTACTTGCAGGTGGAGCATCATGTTATCATGTTGTCGGAAACGGCATCATGTTAGGAGACGGTCGTAGCGCGCATCATGTTTACCCGGGCATCATGTTTCTCCATAATGGGCATCATGTTGGTCCGTGTTGAAAGGATGGCATCATGTTTGTTGCCGGAGCCGCATCATGTTGGGGCATCATGTTCGATTCACTTCTACGCATCATGTTCTGTTACCATTCTGATAAGGGATCCTGGGAGCCCCTGGGAGCCATAGGTTGTCCATACCCTGGGAGCCGCACTTATGCCTGGGAGCCAGGAAAGCCCCTGGGAGCCACCTGACTACCTGGGAGCCGATCTGCCGTTCTGCGAGTATTCATACCGCCTTACCTGGCCTGGGAGCCTCTACTAATCTAATCATACCGCCGCCGGCCTGGGAGCCCGACACCCCTGGGAGCCTCATACCGCCAGCGAAGAGACAGCCTCATACCGCCGCTGGACGAAAGCAGAACTACCTGGGAGCCTCAGGACTCATACCGCCGCCCTCATACCGTCATACCGCCCATACACCTGGGAGCCAGCCTCATACCGCCTCATACCGCCCGCCTTTTCCTTCATACCGCCCCAAGGTCCTGGGATCATACTCTCCGGCAGTCTCTCCGGCAGCCGAGCCTTAATACTCTCCGGCAGCTGGGAGCCCGCGTTCTCTCATACCGCCCATACCGTCATACCTCTCCGTCTCCGGCAGAGTTCCTGGGAGCCTATCTCCGGCAGCTATGTCCGTCTAAGTTCGCCTCCCTGTTAGTTCAGGGTCATCAGTCGTCATATCTCCGGCAGCAGCGCCATTCCTTAGATCTCTCCGGCAGCATACCGCCTGTCTCTCCGGCTCTTCTCCGGCAGCCGGCATCTCCGGCAGAGAAATCTCCGGCAGAGCCTCTCATACCGCCCTTCTTCTCCGGCAGGAGTCTAAAGCGTCTAAAGCCGGAGATTTAAGCACTCTCCGGTCTCCGGCAGGTGAGCACTCTCTCCGGCAGGTGGGTCTAAAGCCGTCTAATCTCCGGCAGGCAGTCCTACACGTTCTCCGGCAGGGTCTAAATCTCCGGCAGGGAGAGTCTAAAGCCGGTCTCCGGCAGTCTTCTCTCCGGCAGGTCTAATCTCCGGCAGTTAAGATGTCTAAAGCCCCCAGGGGAGATTTAAGCCTCTCCGGCAGGGCAGCGTCTAAAGCCGATTTATTGGGAGATTGGGAGATTTAGAGATTTACTTACTGAACCTCGTCTAGTCTAAAGCGTCTAAAGGTCTAAAGCCGCCAGCCAGCTTAGTCTAAAGCCTTTAGGGAGAGGGAGATTTAAAAGTCAGCGGGGAGGGAGATTTAATGCACAAGGTCTAAAGCCAGATTTAGGGAGGGAGATTGTCTAAAGCCTAAAGCCAAGCCACGGCGGTGATTCTGGGGAGGGAGGTGTCTAAAGCCCTCCCGTTGCCTGTTGTTTAACCCGCTGGGAGATTTATTCTGTTGGGAGATTTAGCTAGATGGGGAGATTTATCGGTTAAGCGGGAGATTTAAAGCCCGTCGATCTGATGAAAACCTAAGTATGCGACTTTCCGCAGATGCACTGAAAAGAAAAAGTGAGTGGTCAGAACTACCAACTCTCTAGCGAAAAAGTGAGTGCCTTGCTGTCGTACTGAAAAAGTGAGTCTTGAAAAAGTGAAGCCTGCTTATCCGGGGGAAAAAGTGAAAAAGTGAGCGGAAAAAGTGATGAACGAATTCCTGTGAAAAAGTGACCGACGGGTTTCTGTGAGAAAAAGTGAAAAGAAAAAGTGAAAGCAGGGTTTGAAAAAGTGACAGCCACTGTCGAAAAAGTGAGCTTGAAAAAGAAAAAGTGATAGATTCTCCGACTAACCGTCCTGCGACCCCAGAAAAAGTGACCGGTTCGAAAAAGGAAAAAGTGAAAACTGAAAAAGTGAGTGGAAAAAGTGAGTGAAGCCCAGAAAAAGTGAGTAACAAACGGTTCAACTATCCGCACTATGAAAAAGTGACACGAAAAAGTGAAAAAGTGAATGGGGCGAGAAAAAGTGAAAGTATTCTATTTCTATTTCTATTGAAGAAAAAGTGAATTTAGATGGGTATTCTAGAAAAAGTGAGTGAAAGAGAGAAAAAGTGATATTTCTATTGAGGTATGTATTCTATTGCTTTCATGAAAAAGTGAGTATTCTATTATCGCGGTCACGAATCGCGTACGCCGTATTCTATTCAGAGTTCATGTATTCTATTTCGTATTCTATTGGGCGTATTCTATTTCTATTATCAGGCCCCCATGACTCGCAGCGGTAGTATTCTATTTAAAGGCTTCAGGCTAAAGATGATGTATGTATTCTATTACGCTCAGGTATACGCTACGAAGGACCCCGTGCCGTATTCTATTGAACACCACTCCAAACCAAGGTTCCGAGGTATTCGTATTCTGTATTCTATTCTATTAAGTCTGTATTCTATTTAGCCGTATTCTATTTCGAAGGCCGGCAAGTATTCTATTGTATTCTAGTATTGTATTCTATTTCTATTAATTCACTAGGGTCGATGTATTCTATTAGCTTTTGTATCTAGAGCCTTCTATTCTGTGTATTCTATTTCTATTATTACAGCGCGAGTGCTCCGACATGACTGATAACCGACCACTATGTCTTGCCGTAATGGGGTATGGCGTACTACTTCTGCTCGCCTCGTGTGCCGCATCCTCGTAGGTCGGTCGCGATGGCAATCTTGTGGCATCGAAGTAGTTCCCTTCAAGACTAGATGAGGTCTCCCTTACGCCGCGATTCCTAATATTCTCACAAAGCCTAAGAACCGCTCGTGCCTTCCGTGAACGCTGATCATTTGTGTCAACTCAATTTAAAGGGGATGATATCCTAAATACTTGCGCCCAACACTTCAGGTTGCAGCGATCCTACTCTAGACTGCTAGTTTTTGTTAAGAAGGACACCCAATCAAGTAGAGACCGTGAGATGATGGTGGGTTAGCGCGGAGAGCGGGACTACCTCGCCTGTGGGTACACACCATAGGAATCAACGTACAGATCCTTCTGGACGAAGTCAACAGCGACGGGACTGAGTCGACGTGAGCAGCGTCAATGTGGCAAAGCCGCTTGCTGTTCTCTTTGCAACCAGGATTCTTCTAAGTGTGGGATGAAGCCGGGGGTCTGAGACCGGAGAATGTCCCCCGTGATCAAAGGATGGCAGCGCTATTAGAGTCTCGTATTAGAGTCTAGTCTGGTATTAGAGTCTATTAGAGTCTTTCGGATGCGTGCTGGCCGAGCGATATTAGAGTCTCCTTTGCTCGATCTTATTAGAGTCTCCTCCCGGTCGTATTAGAGTCTAGGCTGCTATTAGAGTCTGCCAAAAAGTTAGTGTAGTAATTAGAGTCTGATTACGCCAGCGCGGGCCATATTAGAGTCTTCAATTAGAGTCTTCATTAGAGTCTAAATTAGAGTCTTGAACGTTAGGCTACGGTAAGGGCTAGTGCACCGCTGTTATTCACCCTTCTTCGGGATATTGATTAGAGTCTCTCGGTTAGATGTTACTCCTTTATTAGAGTCTAGTCTCCCTAATTAGAGTCTTACTACATTAGAGTCTAGAGTCTATTAGAGTCTGCTAGTTCTATTAGAGTCTCTGCTCTGAATTATTAGAGTCTGGGCGATTAATTAGAGTCTTCCAGTATTGCACGGGCGCTGGGATTAGAGTCTTGTCAGTGACGCGTACCGATGTGGTGGACACAATAAACATTAGAGTCTTCTGTGGGATTAGAGTCTTGTAATAATTAGAGTCTCGCCGCACGAGGCTAAACACTACACCTAGTATAGACCCCCATGGCCCACATAGTCAGGAGATTCAAACAACTCGAGCTTTTGACGGACTCCCCTGCGCAGGAAGCAGGCAGGAATATTCGCTGATACTCCTCACTCGGCAGGAAGCAGGAATATACGGTAAATAAGCAGGAATATAATATTGTAGTGTATGCGTACCCGCAGGAATATGACGTGTAGGGGGCAGGAATATGTATACCGTCATTTAGCCAGCGCAACTTAGCTAACGGCCAAAAAGAAATTGCAGGAATATGGTGCAGGAATATCACGCCGATCTTTTGGCCAACCTCAAGGGAGTTGCAGGAATATCAACAACGTCTATGAGTAGCAGGAATATTATCTATACGCTGGCTGCAGGAATATTTAGGCTGCAGCAGGAATATTGGCAGGAATATCCATTGGGAGCAGGAATATACTTTGCAGGCAGGAATATGCATGCAGGAATATGAATATGGCAGGAATATGCGCAGCAGGAATATGGACATTTTCTTTTATAATCCGGGATCCGGGATTAATCCGGGAGGGATCGCAGGAATATAAAGGACATGCAGGAGCAGGAATATGAAGATTTCGATTGCGCAGGAATAGCAGGAATATCAGGAATATGAATTCCTCCCTTTAATCCGGGATCCTTAGATGTGGCTAATCCGGGAGGCGCCTATATGGGAGTTTCGATTAATCCGGGATAATCCGGGACTGATAATCCTAATCCGGGAGATTCCGCTAATCCGGGAAATCCGGGACGGGAGTTTAATCCGGGATAATCCGGGATCCGGGATTCGATTCCTAAAAGCAATTTTTCGATTCCAGCGGTGTATGTCGTATCAACTGTTGTCGGACCATTTCGATTCCTAATCCGGGAGAGATTTAATCCGGGATTCCAAAGGGCTTTTCGATTCCATGTTATTTCGATTAATCCGGGTAATCCGGGATCCAACTAGATATGATCTAATCCGGGAAATCCGGGAGGAGCTTTCGATTAATCCGGGAACTGCTTTCGATTCCCAACGGCGTATGTGGCCTTTGGTCCCTGACGAAAATCTTCATAAAACAATCGCTACTACTGTATAAATATATAGGGCGATACCCCCTCCCTTGTTTCACTAGAGTTTACAATCGGCTGCGCTTGACATTCAATCTGCCGTAAATGAGACAGAATAAAAAGGCTTACCTTGACTTTGCGCGAGCTTCCCCGGCATGAGGAAGACATGACATCTCATAGACGCGTATTTACCCCCACAGTGACCGCTTGTTAACTTCTTTCCTTCTGTCATGGAGGTGGACTCTGCAAGTAAGGAACAGTAAAATGGACGAGACACCTCCAGTCGGCTTTGATGGCCACCCTAAGGCACCCAAAGGGGCTTAGGTGTAGTTACAGGTACGGAGACCTTATAAAGTAGTTACAGTAATTAGTAACCTTATAAACACCTTATAAAACCTTACCTTATAAAAACCTTATAAACTTATAAACACCTTATAAAAAGCGTATCCTAACCTTATAAACTCATGGTAACCTTATAAACTACCTTATAAAAGTTACCTTATAAAGTTACAGCTAGACCTTAACCTTATAAACTTATAAAGCTTGCCCGGCGGCGGTAACCTTAACCTTATAAATATAAACATTTTGTGAGAGACCTTATAAAGTAGTTACAGGTAGCACCTTATAAATGTAGTTACAGATGATACCTTATAAAATGGACCTTATAAAACTGAACCTTATAAATCAACTGATTATATGTTAACCTTATAAATAACCTACCTTATAAATATAGCTACGTTCATAGCTACACTGATTATATTACCTTATAAATAGTTACTACCACCTTATAAAAAATATATACACTGATTATAGTGCACCTAACCTTATAAATATAAAATATGACCTTATAAATATACCTTATAAATATATACGTTCATTCTACGAACTGATTATACAACTGATTATAACAGCCATCGCAAACCATGCACAGCTACGTTCATACTACTGATTATAGATACTGATTATAACTGATTATACAATGGCTACGTTCATTCTACGTTCATATGAACACTGATTATACTGTTAGACTGATTATAATCTACGACTACGTTCAACTGATTATAACCGACAATAAGAACGGTACTACTGATTATACAAGAGACCTGTACTGATTATATATATGCAACTGATTATACACTGACTGATTATAACGTTCATAAAGGTGATACTGATTATAACTGATTATAATACTGATTATAACCTCGGCACCCCCCACTGATTATAGTTACATAAGATGATTGGCATGCTTAGATGGTGTCAGTTTCGAAACCCACGCTATTGTCAGCCGATAGAACCCTTTCCAGTCAGATATTCAAGGAATCCAACCCTGGTAGGCGTGAGTCGGTGGCCTGATAAGTGCGAAAAATTCATGATTGGAAAGTACAGTTCGTGACCTGTGGCAGCCGATCTCCCCATTCGGTACCTAAGCGCCATGCGCGGGACAGTATAAACGAGCTTGACTAAATTTATCCATAGCTGTCGATGCTTGATCGGTGCAAGTAACCGCAGGATACGCGGTAGCCTCCCTGCCTTACAAATCGCATCGAGACGTTTATTATCCGCCTTCCAGGGAATCGGGGCTCTGATAGGGTTTTATGAATAGTGAAGGAAAGTGGAAAAATACCGATTTATATGCTGTCAGCATCAGGTAAAACCACCCGACGCTGAGTTTCATAACACGCAGCAGCGCTAGCCATACATTTGCTTGTCGGATAATCCAGAATGGTAAATCTTCCTACGGCCATTCCAGAAAAGTCTGTCTCGCGTTTTCCAGGGGCCGAACTTCCCGAGGGCTCTGCTACGCGAAGGGAGGGGTACACTCTAACCCGCTAGGAGCATCGGCGCTAGTTCACGTAGGCGACGCCCATCTTCTGATTAGAATCCAAATTGCCTACGCTCCTGTAATGGACGCCATACTGAAGAGCCCGTGCTGACGCTCATTCGCCACCTTAGCTACCTTCGAGTTAGGAACTCACGGGGCTCAAATAGTGGGATCGCGGTCGCAGCGTCTATACTCTACCTTGGCCGTTAAGAGATCTGTCTGCTACCGACTGGCGCGAGCGATAGCACTGAACCATGCTCCCTACCAGCGTGTTGCTTTAGAGTATGTATGATTGAATTGAACGGTAAGGGGACTAGAAGGGAAAGGATTTCGGGGCACGGCCCAATGAACATTGCGAGCGTGTAGTAGCGAGTCCGCTCTCTGCGGCATAATTAGCCAAGGTGCTGATCTTCGTGGTACATCGTTCTCGGCTCCAAGCAGGCTTGTCGGCCTGGTGGTAGCCCTGGTAGAGACTTCCTG"


# print " ".join(FasterClumpFinding(x,y,z,data))
# print len(FasterClumpFinding(x,y,z,data))
